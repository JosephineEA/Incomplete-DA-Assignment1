for(i in recover_miss_index){
auxuaily <- Inf
for(j in recover_obs_index){
abs <- abs(PMM_recover[i]-PMM_recover[j])
if(abs < auxuaily){
auxuaily <- abs
donor <- j
}
}
PMM_NA$recovtime[i] <- donor
}
# show imputation result
PMM_NA
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
# draw marginal distribution plot
plot(density(rep_sto_na$recovtime), lwd = 2, col = "blue",
xlab = "recover_time", main = "Comparation_PMM & SRI")
lines(density(PMM_NA$recovtime), lwd = 2, col = "red")
lines(density(del_na$recovtime),lwd = 2, col = "black")
knitr::opts_chunk$set(echo = TRUE)
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
recover_miss_index
# PART (c): mean regression imputation method
# initialize dataset and locate those missing values' indexes
rep_reg_na <- databp
recover_miss_index <- which(is.na(databp$recovtime))
# calculate coefficients for regression(linear)
beta_4 <- coef(lm(databp$recovtime~databp$logdose + databp$bloodp))
beta_4
# using calculated coefficients to get predict missing value and imputing them
for (i in recover_miss_index){
rep_reg_na$recovtime[i] <- beta_4[1] +
rep_reg_na$logdose[i]*beta_4[2] + rep_reg_na$bloodp[i]*beta_4[3]}
# calculate what the problem asked for
# recover time mean
recov_mean_c <- mean(rep_reg_na$recovtime, na.rm = TRUE)
recov_mean_c
# recover time standard error
recov_std_error_c <- std.error(rep_reg_na$recovtime)
recov_std_error_c
# correlations (recovery time & dose)
cor_rec_does_c <- cor(rep_reg_na$recovtime,
rep_reg_na$logdose, method = c("pearson"))
cor_rec_does_c
# correlations (recovery time & blood pressure)
cor_rec_bp_c <- cor(rep_reg_na$recovtime,
rep_reg_na$bloodp, method = c("pearson"))
cor_rec_bp_c
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
PMM_recover
recover_miss_index
# PART (e): predictive mean matching
# initialize dataset and a vector for predicted recover time value
PMM_NA <- databp
PMM_recover <- c()
# Use regression coefficients beta_4 in sub-question(c) to calculate predictied values
for(i in 1:length(databp$recovtime)){
PMM_recover[i] <- beta_4[1] + rep_reg_na$logdose[i]*beta_4[2]
+ rep_reg_na$bloodp[i]*beta_4[3]
}
# locating observed recover time values' indexes
recover_obs_index <- which(!is.na(databp$recovtime))
# the missing values index is located befor: recover_miss_index
# compare missing element's predictive values with observed elements' predictived values
for(i in recover_miss_index){
auxuaily <- Inf
for(j in recover_obs_index){
abs <- abs(PMM_recover[i]-PMM_recover[j])
if(abs < auxuaily){
auxuaily <- abs
donor <- databp$recovtime[j]
}
}
PMM_NA$recovtime[i] <- donor
}
# show imputation result
PMM_NA
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
PMM_recover
recover_miss_index
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
PMM_recover
recover_miss_index
# PART (e): predictive mean matching
# initialize dataset and a vector for predicted recover time value
PMM_NA <- databp
PMM_recover <- c()
# Use regression coefficients beta_4 in sub-question(c) to calculate predictied values
for(i in 1:length(databp$recovtime)){
PMM_recover[i] <- beta_4[1] + rep_reg_na$logdose[i]*beta_4[2]
+ rep_reg_na$bloodp[i]*beta_4[3]
}
# locating observed recover time values' indexes
recover_obs_index <- which(!is.na(databp$recovtime))
# the missing values index is located befor: recover_miss_index
# compare missing element's predictive values with observed elements' predictived values
for(i in recover_miss_index){
auxuaily <- Inf
for(j in recover_obs_index){
abs <- abs(PMM_recover[i]-PMM_recover[j])
if(abs < auxuaily){
auxuaily <- abs
donor <- PMM_NA$recovtime[j]
}
}
PMM_NA$recovtime[i] <- donor
}
# show imputation result
PMM_NA
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
PMM_recover
recover_miss_index
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
PMM_recover
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
PMM_recover
recover_miss_index
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
PMM_recover
recover_miss_index
PMM_NA$recovtime
# PART (c): mean regression imputation method
# initialize dataset and locate those missing values' indexes
rep_reg_na <- databp
recover_miss_index <- which(is.na(databp$recovtime))
# calculate coefficients for regression(linear)
beta_4 <- coef(lm(databp$recovtime~databp$logdose + databp$bloodp))
beta_4
# using calculated coefficients to get predict missing value and imputing them
for (i in recover_miss_index){
rep_reg_na$recovtime[i] <- beta_4[1] +
rep_reg_na$logdose[i]*beta_4[2] + rep_reg_na$bloodp[i]*beta_4[3]}
# calculate what the problem asked for
# recover time mean
recov_mean_c <- mean(rep_reg_na$recovtime, na.rm = TRUE)
recov_mean_c
# recover time standard error
recov_std_error_c <- std.error(rep_reg_na$recovtime)
recov_std_error_c
# correlations (recovery time & dose)
cor_rec_does_c <- cor(rep_reg_na$recovtime,
rep_reg_na$logdose, method = c("pearson"))
cor_rec_does_c
# correlations (recovery time & blood pressure)
cor_rec_bp_c <- cor(rep_reg_na$recovtime,
rep_reg_na$bloodp, method = c("pearson"))
cor_rec_bp_c
# PART (e): predictive mean matching
# initialize dataset and a vector for predicted recover time value
PMM_NA <- databp
PMM_recover <- c()
# Use regression coefficients beta_4 in sub-question(c) to calculate predictied values
for(i in 1:length(databp$recovtime)){
PMM_recover[i] <- beta_4[1] + rep_reg_na$logdose[i]*beta_4[2]
+ rep_reg_na$bloodp[i]*beta_4[3]
}
# locating observed recover time values' indexes
recover_obs_index <- which(!is.na(databp$recovtime))
# the missing values index is located befor: recover_miss_index
# compare missing element's predictive values with observed elements' predictived values
for(i in recover_miss_index){
auxuaily <- Inf
for(j in recover_obs_index){
abs <- abs(PMM_recover[i]-PMM_recover[j])
if(abs < auxuaily){
auxuaily <- abs
donor <- PMM_NA$recovtime[j]
}
}
PMM_NA$recovtime[i] <- donor
}
# show imputation result
PMM_NA
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
PMM_recover
recover_miss_index
PMM_NA$recovtime
# PART (e): predictive mean matching
# initialize dataset and a vector for predicted recover time value
PMM_NA <- databp
PMM_recover <- c()
# Use regression coefficients beta_4 in sub-question(c) to calculate predictied values
for(i in 1:length(databp$recovtime)){
PMM_recover[i] <- beta_4[1] + rep_reg_na$logdose[i]*beta_4[2]
+ rep_reg_na$bloodp[i]*beta_4[3]
}
# locating observed recover time values' indexes
recover_obs_index <- which(!is.na(databp$recovtime))
# the missing values index is located befor: recover_miss_index
# compare missing element's predictive values with observed elements' predictived values
for(i in recover_miss_index){
auxuaily <- Inf
donor <- c()
donor
for(j in recover_obs_index){
abs <- abs(PMM_recover[i]-PMM_recover[j])
if(abs < auxuaily){
auxuaily <- abs
elif(abs = auxuaily){
# PART (e): predictive mean matching
# initialize dataset and a vector for predicted recover time value
PMM_NA <- databp
PMM_recover <- c()
# Use regression coefficients beta_4 in sub-question(c) to calculate predictied values
for(i in 1:length(databp$recovtime)){
PMM_recover[i] <- beta_4[1] + rep_reg_na$logdose[i]*beta_4[2]
+ rep_reg_na$bloodp[i]*beta_4[3]
}
# locating observed recover time values' indexes
recover_obs_index <- which(!is.na(databp$recovtime))
# the missing values index is located befor: recover_miss_index
# compare missing element's predictive values with observed elements' predictived values
for(i in recover_miss_index){
auxuaily <- Inf
donor <- c()
donor
for(j in recover_obs_index){
abs <- abs(PMM_recover[i]-PMM_recover[j])
if(abs < auxuaily){
auxuaily <- abs
else if(abs = auxuaily){
# PART (e): predictive mean matching
# initialize dataset and a vector for predicted recover time value
PMM_NA <- databp
PMM_recover <- c()
# Use regression coefficients beta_4 in sub-question(c) to calculate predictied values
for(i in 1:length(databp$recovtime)){
PMM_recover[i] <- beta_4[1] + rep_reg_na$logdose[i]*beta_4[2]
+ rep_reg_na$bloodp[i]*beta_4[3]
}
# locating observed recover time values' indexes
recover_obs_index <- which(!is.na(databp$recovtime))
# the missing values index is located befor: recover_miss_index
# compare missing element's predictive values with observed elements' predictived values
for(i in recover_miss_index){
auxuaily <- Inf
donor <- c()
donor
for(j in recover_obs_index){
abs <- abs(PMM_recover[i]-PMM_recover[j])
if(abs < auxuaily){
auxuaily <- abs}
else if(abs = auxuaily){
# PART (e): predictive mean matching
# initialize dataset and a vector for predicted recover time value
PMM_NA <- databp
PMM_recover <- c()
# Use regression coefficients beta_4 in sub-question(c) to calculate predictied values
for(i in 1:length(databp$recovtime)){
PMM_recover[i] <- beta_4[1] + rep_reg_na$logdose[i]*beta_4[2]
+ rep_reg_na$bloodp[i]*beta_4[3]
}
# locating observed recover time values' indexes
recover_obs_index <- which(!is.na(databp$recovtime))
# the missing values index is located befor: recover_miss_index
# compare missing element's predictive values with observed elements' predictived values
for(i in recover_miss_index){
auxuaily <- Inf
donor <- c()
donor
for(j in recover_obs_index){
abs <- abs(PMM_recover[i]-PMM_recover[j])
if(abs < auxuaily){
auxuaily <- abs}
else if(abs == auxuaily){
auxuaily <- abs
donor <- append(donor,PMM_NA$recovtime[j])}
# donor <- PMM_NA$recovtime[j]
}
PMM_NA$recovtime[i] <- donor[1]
}
# PART (e): predictive mean matching
# initialize dataset and a vector for predicted recover time value
PMM_NA <- databp
PMM_recover <- c()
# Use regression coefficients beta_4 in sub-question(c) to calculate predictied values
for(i in 1:length(databp$recovtime)){
PMM_recover[i] <- beta_4[1] + rep_reg_na$logdose[i]*beta_4[2]
+ rep_reg_na$bloodp[i]*beta_4[3]
}
# locating observed recover time values' indexes
recover_obs_index <- which(!is.na(databp$recovtime))
# the missing values index is located befor: recover_miss_index
# compare missing element's predictive values with observed elements' predictived values
for(i in recover_miss_index){
auxuaily <- Inf
donor <- c()
for(j in recover_obs_index){
abs <- abs(PMM_recover[i]-PMM_recover[j])
if(abs < auxuaily){
auxuaily <- abs
donor <- PMM_NA$recovtime[j]
}
}
PMM_NA$recovtime[i] <- donor
}
# show imputation result
PMM_NA
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
PMM_NA$recovtime
PMM_recover
recover_miss_index
PMM_NA$recovtime
# calculate what the problem asked for
# recover time mean
recov_mean_e <- mean(PMM_NA$recovtime, na.rm = TRUE)
recov_mean_e
# recover time standard error
recov_std_error_e <- std.error(PMM_NA$recovtime)
recov_std_error_e
# correlations (recovery time & dose)
cor_rec_does_e <- cor(PMM_NA$recovtime,
PMM_NA$logdose, method = c("pearson"))
cor_rec_does_e
# correlations (recovery time & blood pressure)
cor_rec_bp_e <- cor(PMM_NA$recovtime,
PMM_NA$bloodp, method = c("pearson"))
cor_rec_bp_e
